names = c("Good","Bad"),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
stat_summary(fun = mean, geom ='point', shape=20),
main = "BP by First MD Assessment"
)
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
stat_summary(fun = mean, geom ='point', shape=20),
main = "BP by First MD Assessment"
)
View(df_hosp)
#View Table in R
View(data)
#Read file Use this format
#read.csv("C:/Users/YourName/Documents/Name of file.csv")
data <-read.csv("C:/Users/18135/Pictures/Open Source R Fall 2025 Janae/Data Sets R Assignments/Hospital Patient Data Practice.csv")
#First rows of table
head(data)
#View Table in R
View(data)
df_hosp <- na.exclude(df_hosp) #Gets rid of NA
# Inspect and handle NA:
summary(df_hosp)
df_hosp <- na.exclude(df_hosp) #Gets rid of NA
summary(df_hosp)
# Inspect and handle NA:
summary(df_hosp)
# Inspect and handle NA:
summary(df_hosp)
df_hosp <- na.exclude(df_hosp)#Gets rid of NA
summary(df_hosp)
# Inspect and handle NA:
summary(df_hosp)
#df_hosp <- na.exclude(df_hosp)#Gets rid of NA
df_hosp <- na.omit(df_hosp)
summary(df_hosp)
boxplot(
BloodPressure ~ FirstAssess*Frequency,
data = df_hosp,
names = c("Good","Bad"),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by First MD Assessment"
)
boxplot(
BloodPressure*Frequency ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by First MD Assessment"
)
boxplot(
BloodPressure*Frequency ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
xlab = "Second Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Second MD Assessment"
)
boxplot(
BloodPressure ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
xlab = "Second Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Second MD Assessment"
)
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by First MD Assessment"
)
hist(
df_hosp$Frequency,
breaks = seq(0, 1, by = 0.1),
xlab = "Visit Frequency",
main = "Histogram of Visit Frequency"
)
boxplot(
BloodPressure ~ FinalDecision,
data = df_hosp,
names = c("Low","High"),
ylim = c(50, 210),
xlab = "Final Decision",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Final Decision"
)
boxplot(
BloodPressure ~ FinalDecision,
data = df_hosp,
names = c("Low","High"),
ylim = c(0, 210),
xlab = "Final Decision",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Final Decision"
)
boxplot(
BloodPressure ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
ylim = c(0, 210),
xlab = "Second Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Second MD Assessment"
)
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
ylim = c(0, 210),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by First MD Assessment"
)
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
ylim = c(25, 210),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by First MD Assessment"
)
boxplot(
BloodPressure ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
ylim = c(25, 210),
xlab = "Second Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Second MD Assessment"
)
boxplot(
BloodPressure ~ FirstAssess,
data = df_hosp,
names = c("Good","Bad"),
ylim = c(0, 210),
xlab = "First Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by First MD Assessment"
)
boxplot(
BloodPressure ~ FinalDecision,
data = df_hosp,
names = c("Low","High"),
xlab = "Final Decision",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Final Decision"
)
boxplot(
BloodPressure ~ SecondAssess,
data = df_hosp,
names = c("Low","High"),
xlab = "Second Assesment",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Second MD Assessment"
)
boxplot(
BloodPressure ~ FinalDecision,
data = df_hosp,
names = c("Low","High"),
xlab = "Final Decision",
ylab = "Blood Pressure",
col = c("green","red"),
main = "BP by Final Decision"
)
hist(
df_hosp$Frequency,
breaks = seq(0, 1, by = 0.1),
xlab = "Visit Frequency",
main = "Histogram of Visit Frequency"
)
hist(
df_hosp$BloodPressure,
breaks = 8,
xlab = "Blood Pressure",
main = "Histogram of Blood Pressure"
)
install.packages("BiocManager", repos = "https://cloud.r-project.org")
BiocManager::install(c("GenomicRanges", "Organism.dplyr"))
install.packages("bio3d")
library(bio3d)
data("aa.index")
head(aa.index)
data("aa.table")
head(aa.table)
str(aa.table)
summary(aa.table)
data("DNase")
data("DNase")
head(DNase)
data("DNase")
Head(DNase)
Head(DNase)
head(DNase)
str(DNase)
summary(DNase)
plot(DNase)
View(DNase)
s3_obj <- list(name = "Recombinant Protein", concentration = x , GPA = )
s3_obj <- list(name = "Recombinant Protein", concentration = x , GPA = y)
s3_obj <- list(conc ~ density, data = DNase)
print(s3_obj)
class(s3_obj) <- "Recombinant Protein"
class(s3_obj) <- "Recombinant Protein"
class(s3_obj) <- "Recombinant Protein"
print(s3_obj)
setClass("Recombinant Protein",
slots = c(run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant Protein", run = "numeric", data = DNase)
setClass("Recombinant Protein",
slots = c(run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant Protein", conc ~ density, data = DNase)
s4_obj <- new("Recombinant Protein", conc ~ density, data = DNase)
s4_obj <- new("Recombinant_Protein", conc ~ density, data = DNase)
setClass("Recombinant_Protein",
slots = c(run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant_Protein", conc ~ density, data = DNase)
setClass("Recombinant Protein",
slots = c(run = "Assay Run", conc = "Concentration", density = "Density"))
setClass("Recombinant Protein",
slots = c(conc = "Concentration", density = "Density"))
setClass("Recombinant Protein",
slots = c(conc = "Concentration", density = "Density"))
setClass("Recombinant Protein",
slots = c(conc = "Concentration", density = "Density"))
setClass("Recombinant Protein",
slots = c(conc = "Numeric", density = "Numeric"))
print(s3_obj)
setClass("Recombinant Protein",
slots = c(conc = "Numeric", density = "Numeric"))
setClass("Recombinant Protein",
slots = c(Run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant Protein", conc ~ density, data = DNase)
setClass("Recombinant Protein",
slots = c(Run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant Protein", data = DNase)
setClass("Recombinant Protein",
slots = c(Run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant Protein", run = 1, conc = 0.04882812, density = 0.017)
s4_obj <- new("Recombinant Protein", run = 1, conc = 0.04882812, density = 0.017)
setClass("Recombinant Protein",
slots = c(name = "Run", conc = "numeric", density = "numeric"))
setClass("Recombinant Protein",
slots = c(run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant Protein", run = 1, conc = 0.04882812, density = 0.017)
print(s4_obj)
class(s4_obj)
print(s4_obj)
isS4(s4_obj)
#
mode(s4_obj)
#
typeof(s4_obj)
#
is.numeric(s4_obj)
is.integer(s4_obj)
is.list(s4_obj)
print(s4_obj)
is.list(s4_obj)
is.numeric(s4_obj)
typeof(s4_obj)
attributes(s4_obj)
attributes(s4_obj)
#Checks class system
class(s4_obj)
attributes(s4_obj)
install.packages("pryr")
is.object(s4_obj)
is.object(s3_obj)
#Created an S3 example
s3_obj <- list(conc ~ density, data = DNase)
install.packages("pryr")
library(pryr)
#Check Class S3
otype(s3_obj)
ftype(s3_obj)
UseMethod(s3_obj)
class(s3_obj) <- "Recombinant Protein"
print(s3_obj)
#Check Class S3
otype(s3_obj)
#Checks class system
class(s4_obj)
isS4(s4_obj)
print(s4_obj)
attributes(s4_obj)
is.object(s4_obj) # Supposed to return false, but does not; not a pure base type
is_s3_generic(s3_obj)
isS3method(s3_obj)
#Check Class S3
otype(s3_obj)
typeof(s3_obj)
attributes(s4_obj)
#Choose Data
data("DNase")
#Choose Data
data("DNase")
head(DNase)
#Summarize data set
summary(DNase)
isS4(s4_obj) # Checks if S4
s4_obj <- new("Recombinant Protein", run = 1, conc = 0.04882812, density = 0.017)
#Choose Data
data("DNase")
head(DNase)
#Describe its structure
str(DNase)
#Summarize data set
summary(DNase)
#View the data set
View(DNase)
#Examines OO system in more depth
install.packages("pryr")
install.packages("pryr")
library(pryr)
#Examines OO system in more depth
install.packages("pryr")
library(pryr)
#Created an S3 example
s3_obj <- list(conc ~ density, data = DNase)
print(s3_obj)
class(s3_obj) <- "Recombinant Protein"
print(s3_obj)
#Check Class S3
otype(s3_obj)
typeof(s3_obj) #Output is "list"
isS3stdGeneric(s3_obj)
isS3method(s3_obj)
typeof(s3_obj) #Output is "list"
setClass("Recombinant Protein",
slots = c(run = "numeric", conc = "numeric", density = "numeric"))
s4_obj <- new("Recombinant Protein", run = 1, conc = 0.04882812, density = 0.017)
#Checks class system
class(s4_obj)
isS4(s4_obj) # Checks if S4
print(s4_obj)
typeof(s4_obj) #Checks objects base type
attributes(s4_obj) # Checks attributes of data
is.object(s4_obj) # Supposed to return false, but does not; not a pure base type
#Created an S3 example
s3_obj <- list(conc ~ density, data = DNase)
print(s3_obj)
class(s3_obj) <- "Recombinant Protein"
#Check Class S3
otype(s3_obj)
typeof(s3_obj) #Output is "list"
#Checks class system
class(s4_obj)
class(s3_obj) <- "Recombinant Protein"
print(s3_obj)
class(s3_obj) <- "Recombinant Protein"
print(class(s3_obj))
print(class(s3_obj))
#Check Class S3
otype(s3_obj)
typeof(s3_obj) #Output is "list"
#Checks class system
class(s4_obj)
isS4(s4_obj) # Checks if S4
print(s4_obj)
typeof(s4_obj) #Checks objects base type
attributes(s4_obj) # Checks attributes of data
is.object(s4_obj) # Supposed to return false, but does not; not a pure base type
BiocManager::install(version = "3.21")
#Set pathway to file
file <- system.file("C:\Users\18135\Pictures\Open Source R Fall 2025 Janae\r-programming-assignments\GitHub\r-programming-assignments\Assignment_08 Input_Output_String Manip\uniprotkb_proteome_UP000000429_2025_09_25.fasta (1).txt", package = "canprot")
#Set pathway to file
file <- system.file("C:/Users/18135/Pictures/Open Source R Fall 2025 Janae/r-programming-assignments/GitHub/r-programming-assignments/Assignment_08 Input_Output_String Manip/uniprotkb_proteome_UP000000429_2025_09_25.fasta (1).txt", package = "canprot")
proteome_ATCC_700392 <- read.table(file.choose(), header = TRUE, stringsAsFactors = FALSE)
view("proteome_ATCC_700392")
print("proteome_ATCC_700392")
#Set pathway to file
proteome_ATCC_700392 <- read_fasta("C:\Users\18135\Pictures\Open Source R Fall 2025 Janae\r-programming-assignments\GitHub\r-programming-assignments\Assignment_08 Input_Output_String Manip\uniprotkb_proteome_UP000000429_2025_09_25.fasta (1).txt")
head (proteome_ATCC_700392)
View(filtered_data)
count_K <- stri_count(filtered_data, "K")
#Set pathway to file
setwd("C:/Users/18135/Documents/Open Source R Fall 2025 Janae/r-programming-assignments/GitHub/r-programming-assignments/Assignment_08 Input_Output_String Manip")
getwd()
library(Biostrings)
proteome_ATCC_700392_2695 <- "C:/Users/18135/Documents/Open Source R Fall 2025 Janae/r-programming-assignments/GitHub/r-programming-assignments/Assignment_08 Input_Output_String Manip/UP000000429_85962.fasta"
proteome <- readAAStringSet("UP000000429_85962.fasta")
#Setting my data frame to use plyr
proteome_df <- data.frame(
names = names(proteome),
sequences = as.character(proteome),
stringsAsFactors = FALSE
)
library(plyr) # load plyr
new_proteome_df <- data.frame(
names = names(proteome),
sequences = as.character(proteome),
stringsAsFactors = FALSE
)
filtered_data <- new_proteome_df %>%
#slice(1:2) %>%  # Select only the first two rows
filter(grepl("K|R|D|E|S|T|Q|P", sequences)) #IDP sequence search need to count instead somehow
filtered_data <- new_proteome_df %>%
#slice(1:2) %>%  # Select only the first two rows
filter(grepl("K|R|D|E|S|T|Q|P", sequences)) #IDP sequence search need to count instead somehow
filtered_data <- new_proteome_df %>%
#slice(1:2) %>%  # Select only the first two rows
filter(grepl("K|R|D|E|S|T|Q|P", sequences)) #IDP sequence search need to count instead somehow
new_proteome_df <- data.frame(
names = names(proteome),
sequences = as.character(proteome),
stringsAsFactors = FALSE
)
filtered_data <- new_proteome_df %>%
#slice(1:2) %>%  # Select only the first two rows
filter(grepl("K|R|D|E|S|T|Q|P", sequences)) #IDP sequence search need to count instead somehow
library(dplyr)
new_proteome_df <- data.frame(
names = names(proteome),
sequences = as.character(proteome),
stringsAsFactors = FALSE
)
filtered_data <- new_proteome_df %>%
#slice(1:2) %>%  # Select only the first two rows
filter(grepl("K|R|D|E|S|T|Q|P", sequences)) #IDP sequence search need to count instead somehow
print(filtered_data)
library("stringi")
count_K <- stri_count(filtered_data, "K")
count_K <- stri_count_charclass(filtered_data, "K")
count_K <- stri_count_charcla(filtered_data$sequences, "K")
count_K <- stri_count_fixed(filtered_data$sequences, "K")
print(count_K)
count_K <- stri_count_fixed(filtered_data$names$sequences, "K")
count_R <- stri_count_fixed(filtered_data$sequences,"R")
print(count_R)
count_R <- stri_count_fixed(filtered_data$sequences,"R")
View(count_K)
count_amino_acid <- filtered_data %>%
filter(sequences %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences %>% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences in c("K","R", "D", "E","S","T","Q", "P",)) %>%
count_amino_acid <- filtered_data %>%
filter(sequences, c("K","R", "D", "E","S","T","Q", "P",)) %>%
count(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count_amino_acid(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count_amino_acid(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count_amino_acid(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count_amino_acid(sequences)
count_amino_acid <- filtered_data %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count_amino_acid(sequences)
`counts<-`(filtered_data) %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
count_amino_acid(sequences)
`counts<-`(filtered_data) %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
counts(sequences)
`counts<-`(filtered_data) %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
counts(sequences)
`counts<-`(filtered_data) %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
counts(sequences)
`counts<-`(filtered_data) %>%
filter(sequences  %in% c("K","R", "D", "E","S","T","Q", "P",)) %>%
counts(sequences)
`counts<-`(filtered_data)
`counts<-`(filtered_data)
filter(grepl  %in% c("K","R", "D", "E","S","T","Q", "P", sequences)) %>%
counts(sequences)
filter(grepl  %in% c("K","R", "D", "E","S","T","Q", "P", sequences))
filter(grepl  %in% ("K","R", "D", "E","S","T","Q", "P", sequences))
filter(grepl("K","R", "D", "E","S","T","Q", "P", counts(sequences)))
letterFrequency(filtered_data)
letter(filtered_data)
letterFrequency(filtered_data)
